name: CI/CD Pipeline with Docker

on:
  push:
    branches: [ develop ]  # develop 브랜치에 push 발생 시 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application.yml
          ${{ secrets.APPLICATION_YML }}
          EOF
        shell: bash

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.MY_APP }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.MY_APP }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository  # ✅ 리포지토리 체크아웃 추가
        uses: actions/checkout@v4

      - name: Debug - Check if docker-compose.yml exists  # ✅ 파일 존재 확인
        run: ls -l docker-compose.yml || echo "docker-compose.yml not found!"

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MY_APP: ${{ vars.MY_APP }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # EC2로 docker-compose.yml 복사
          scp -i private_key.pem docker-compose.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/docker-compose.yml
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            docker pull $DOCKER_USERNAME/$MY_APP:latest
            
            docker-compose down || true
        
            docker-compose up -d --remove-orphans
            docker image prune -f
          "

          rm -f private_key.pem
